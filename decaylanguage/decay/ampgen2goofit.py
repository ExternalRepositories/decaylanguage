#!/usr/bin/env python
# coding: utf-8

from __future__ import absolute_import, division, print_function

from decaylanguage.particle import Particle, SpinType
from decaylanguage.decay.goofit import GooFitChain, SF_4Body
import datetime
from functools import partial

from plumbum import colors

# Python 3
import io
from builtins import print as orig_print

def ampgen2goofit(filename, ret_output = False):
    if ret_output:
        output = io.StringIO()
        print = partial(orig_print, file=output)
    else:
        print = orig_print


    lines, all_states = GooFitChain.read_AmpGen(str(filename))

    print(r'/* Autogenerated file by AmpGen2GooFit')
    print('Generated on ', datetime.datetime.now())

    print('\n')
    for seen_factor in {p.spindetails() for p in lines}:
        my_lines = [p for p in lines if p.spindetails()==seen_factor]
        print(colors.bold | seen_factor, ":", *my_lines[0].spinfactors)
        for line in my_lines:
            print(' ', colors.blue | str(line))


    print('\n')
    for spintype in SpinType:
        ps = [format(str(p), '11') for p in sorted(GooFitChain.all_particles) if p.spintype == spintype]
        print("{spintype.name:>12}:".format(spintype=spintype), *ps)


    print('\n')
    for n, line in enumerate(lines):
        print('{n:2} {line!s:<70} spinfactors: {lensf}  L: {line.L} [{Lr[0]}-{Lr[1]}]'
                .format(n=n, line=line, lensf=len(line.spinfactors), Lr=line.L_range()))

    # We can make the GooFit Intro code:

    print(colors.bold & colors.green | '\n\nAll discovered spin configurations:')

    for line in sorted({line.spindetails() for line in lines}):
        print(colors.green | line)

    print(colors.bold & colors.blue | '\n\nAll known spin configurations:')

    # TODO: 4 body only
    for e in SF_4Body:
        print(colors.blue | e.name)

    print('\n*/\n\n    // Intro')
    print(GooFitChain.make_intro(all_states))

    print('\n\n    // Parameters')
    print(GooFitChain.make_pars())

    # And the lines can be turned into code, as well:

    print('\n\n    // Lines')
    for n, line in enumerate(lines):
        print('    // Line', n)
        print(line.to_goofit(all_states[1:]), end='\n\n\n')

    if(ret_output):
        return output.getvalue()
